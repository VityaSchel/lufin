#!/bin/bash

if [ -f ".env" ]; then
  echo "Error: .env file already exists. Please remove it first if you want to generate a new one."
  exit 1
fi

# == Manual ==
# Frontend (optional) PUBLIC_ADMIN_EMAIL
# Caddy (required) DOMAIN

# == Automatic ==
# Frontend (required) API_URL
# Backend (optional) BACKEND_PORT

# Mongodb:
# MONGODB_USERNAME
# MONGODB_PASSWORD
# MONGODB_DB_NAME

# PostgreSQL:
# POSTGRES_USER
# POSTGRES_PASSWORD
# POSTGRES_DB

# S3:
# S3_BUCKET_NAME
# S3_ACCESS_KEY
# S3_SECRET_ACCESS_KEY
# S3_ENDPOINT (http://s3:9000)


# == Unsupported ==
# Backend (optional) CORS_ORIGIN

echo "Enter your domain name: (e.g. \"example.com\" or \"localhost\")"
read domain
if [ -z "$domain" ]; then
  echo "Domain name cannot be empty"
  exit 1
else
  echo ""
fi

API_URL="https://$domain/api/"

echo "(Optional) enter your admin email: (e.g. \"lufin@hloth.dev\" or leave empty to skip)"
read admin_email
if [ -n "$admin_email" ]; then
  echo ""
fi


echo "Select database: \"postgres\" (recommended) / \"mongo\" / \"sqlite\""
read db_type
if [ -z "$db_type" ]; then
  echo "Database type cannot be empty"
  exit 1
else
  echo ""
fi
if [ "$db_type" == "mongo" ]; then
  DB_TYPE="mongo"
  MONGODB_USERNAME="lufin"
  MONGODB_PASSWORD="lufinpassword"
  MONGODB_DB_NAME="lufin_db"
elif [ "$db_type" == "postgres" ]; then
  DB_TYPE="postgres"
  POSTGRES_USER="lufin"
  POSTGRES_PASSWORD="lufinpassword"
  POSTGRES_DB="lufin_db"
elif [ "$db_type" == "sqlite" ]; then
  DB_TYPE="sqlite"
else
  echo "Unknown database type: $db_type"
  exit 1
fi

echo "Select storage: \"fs\" (recommended) / \"s3\""
read storage_type
if [ -z "$storage_type" ]; then
  echo "Storage type cannot be empty"
  exit 1
else
  echo ""
fi
if [ "$storage_type" == "fs" ]; then
  STORAGE_TYPE="fs"
elif [ "$storage_type" == "s3" ]; then
  STORAGE_TYPE="s3"
  S3_BUCKET_NAME="lufin-bucket"
  S3_ACCESS_KEY="minioadmin"
  S3_SECRET_ACCESS_KEY="minioadmin"
  S3_ENDPOINT="http://s3:9000"
else
  echo "Unknown storage type: $storage_type"
  exit 1
fi

echo "# Generated by generate-env.sh on $(date)" > .env
echo "" >> .env

echo "DOMAIN=$domain" >> .env
echo "API_URL=$API_URL" >> .env
echo "DB_TYPE=$DB_TYPE" >> .env
echo "STORAGE_TYPE=$STORAGE_TYPE" >> .env

if [ -n "$admin_email" ]; then
  echo "PUBLIC_ADMIN_EMAIL=$admin_email" >> .env
fi

if [ "$DB_TYPE" == "mongo" ]; then
  echo "MONGODB_USERNAME=$MONGODB_USERNAME" >> .env
  echo "MONGODB_PASSWORD=$MONGODB_PASSWORD" >> .env
  echo "MONGODB_DB_NAME=$MONGODB_DB_NAME" >> .env
elif [ "$DB_TYPE" == "postgres" ]; then
  echo "POSTGRES_USER=$POSTGRES_USER" >> .env
  echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
  echo "POSTGRES_DB=$POSTGRES_DB" >> .env
fi

if [ "$STORAGE_TYPE" == "s3" ]; then
  echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> .env
  echo "S3_ACCESS_KEY=$S3_ACCESS_KEY" >> .env
  echo "S3_SECRET_ACCESS_KEY=$S3_SECRET_ACCESS_KEY" >> .env
  echo "S3_ENDPOINT=$S3_ENDPOINT" >> .env
fi

echo "Written .env file successfully. Now run ./run.sh start"